USE gAMSCloud_DEMO_04
GO

IF DB_NAME() <> N'gAMSCloud_DEMO_04' SET NOEXEC ON
GO

SET QUOTED_IDENTIFIER, ANSI_NULLS ON
GO

--
-- Create or alter procedure [dbo].[TRIP_Upd]
--
GO
PRINT (N'Create or alter procedure [dbo].[TRIP_Upd]')
GO
 CREATE OR ALTER PROCEDURE dbo.TRIP_Upd @p_TOP INT = 500,
@p_AS_ID NVARCHAR(20) = NULL,
@p_TYPE VARCHAR(1) = NULL,
@p_QUANTITY DECIMAL(18,2) = NULL,
@p_QUANTITY_UNIT NVARCHAR(20) = NULL,
@p_QUANTITY_TRIP int = NULL,
@p_GO_FROM NVARCHAR(200) = NULL,
@p_GO_TO NVARCHAR(200) = NULL,
@p_TIME VARCHAR(20) = NULL,
@p_LENGTH DECIMAL(18,2) = NULL,
@p_LENGTH_UNIT NVARCHAR(20) = NULL,
@p_UNIT_ID NVARCHAR(20)= NULL,
@p_UNIT_DISTANCE_ID NVARCHAR(20) = NULL

AS
DECLARE @ERRORSYS NVARCHAR(15) = ''
IF (NOT EXISTS (SELECT * FROM TRIP t WHERE t.AS_ID= @p_AS_ID AND t.TYPE = @p_TYPE))
  SET @ERRORSYS = 'NOT FOUND'

IF @ERRORSYS <> ''
BEGIN
	SELECT ErrorCode Result, ErrorDesc ErrorDesc FROM SYS_ERROR WHERE ErrorCode = @ERRORSYS
  RETURN '0'
END
  BEGIN TRANSACTION
  UPDATE TRIP
  SET [QUANTITY] = @p_QUANTITY,[QUANTITY_UNIT] = @p_QUANTITY_UNIT,[QUANTITY_TRIP] =@p_QUANTITY_TRIP,[GO_FROM] = @p_GO_FROM,[GO_TO]= @p_GO_TO,[TIME] = convert(DATETIME,@p_TIME,103),[LENGTH] = @p_LENGTH,[LENGTH_UNIT] = @p_LENGTH_UNIT, [UNIT_ID] = @p_UNIT_ID, [UNIT_DISTANCE_ID] = @p_UNIT_DISTANCE_ID
  WHERE AS_ID = @p_AS_ID AND TYPE = @p_TYPE  
  IF @@Error <> 0 GOTO ABORT
  COMMIT TRANSACTION

  SELECT
  '0' AS RESULT, @p_AS_ID AS_ID
  RETURN '0'

ABORT:
  BEGIN
    ROLLBACK TRANSACTION
    SELECT
      '-1' AS Result
     ,'' AS_ID
    RETURN '-1'
  END
GO

--
-- Create or alter procedure [dbo].[TRIP_Search]
--
GO
PRINT (N'Create or alter procedure [dbo].[TRIP_Search]')
GO
 CREATE OR ALTER PROCEDURE dbo.TRIP_Search @p_TOP INT = 500,
@p_AS_ID NVARCHAR(20) = NULL,
@p_TYPE VARCHAR(1) = NULL,
@p_QUANTITY DECIMAL(18,2) = NULL,
@p_QUANTITY_UNIT NVARCHAR(20) = NULL,
@p_QUANTITY_TRIP INT = NULL,
@p_GO_FROM NVARCHAR(200) = NULL,
@p_GO_TO NVARCHAR(200) = NULL,
@p_TIME VARCHAR(20) = NULL,
@p_LENGTH DECIMAL(18,2) = NULL,
@p_LENGTH_UNIT NVARCHAR(20) = NULL 

AS
  BEGIN -- PAGING
    IF (@p_TOP IS NULL OR @p_TOP = '' OR @p_TOP = 0) -- PAGING BEGIN
      SELECT t.*
      -- SELECT END
      FROM TRIP t WHERE 1 = 1 
      AND (t.AS_ID = @p_AS_ID OR @p_AS_ID IS NULL OR @p_AS_ID = '')
      AND (t.TYPE = @p_TYPE OR @p_TYPE IS NULL OR @p_TYPE = '')
      AND (t.QUANTITY = @p_QUANTITY OR @p_QUANTITY IS NULL OR @p_QUANTITY <= 0)
      AND (t.QUANTITY_UNIT = @p_QUANTITY_UNIT OR @p_QUANTITY_UNIT IS NULL OR @p_QUANTITY_UNIT = '')
      AND (t.QUANTITY_TRIP = @p_QUANTITY_TRIP OR @p_QUANTITY_TRIP IS NULL OR @p_QUANTITY_TRIP = '')
      AND (t.GO_FROM = @p_GO_FROM OR @p_GO_FROM IS NULL OR @p_GO_FROM = '')
      AND (t.GO_TO = @p_GO_TO OR @p_GO_TO IS NULL OR @p_GO_TO = '')
      AND (DATEDIFF(DAY,t.TIME, CONVERT(DATETIME,@p_TIME,103)) = 0 OR @p_TIME IS NULL OR @p_TIME = '')
      AND (t.LENGTH = @p_LENGTH OR @p_LENGTH IS NULL OR @p_LENGTH <= 0)
      AND (t.LENGTH_UNIT = @p_LENGTH_UNIT OR @p_LENGTH_UNIT IS NULL OR @p_LENGTH_UNIT = '')
      -- PAGING END
    ELSE
      -- PAGING BEGIN 
      SELECT TOP (@p_TOP) t.* 
      -- SELECT END
      FROM TRIP t WHERE 1 = 1 
      AND (t.AS_ID = @p_AS_ID OR @p_AS_ID IS NULL OR @p_AS_ID = '')
      AND (t.TYPE = @p_TYPE OR @p_TYPE IS NULL OR @p_TYPE = '')
      AND (t.QUANTITY = @p_QUANTITY OR @p_QUANTITY IS NULL OR @p_QUANTITY <= 0)
      AND (t.QUANTITY_UNIT = @p_QUANTITY_UNIT OR @p_QUANTITY_UNIT IS NULL OR @p_QUANTITY_UNIT = '')
      AND (t.QUANTITY_TRIP = @p_QUANTITY_TRIP OR @p_QUANTITY_TRIP IS NULL OR @p_QUANTITY_TRIP = '')
      AND (t.GO_FROM = @p_GO_FROM OR @p_GO_FROM IS NULL OR @p_GO_FROM = '')
      AND (t.GO_TO = @p_GO_TO OR @p_GO_TO IS NULL OR @p_GO_TO = '')
      AND (DATEDIFF(DAY,t.TIME, CONVERT(DATETIME,@p_TIME,103)) = 0 OR @p_TIME IS NULL OR @p_TIME = '')
      AND (t.LENGTH = @p_LENGTH OR @p_LENGTH IS NULL OR @p_LENGTH <= 0)
      AND (t.LENGTH_UNIT = @p_LENGTH_UNIT OR @p_LENGTH_UNIT IS NULL OR @p_LENGTH_UNIT = '')
      -- PAGING END
  END -- PAGING
GO

--
-- Create or alter procedure [dbo].[TRIP_INS]
--
GO
PRINT (N'Create or alter procedure [dbo].[TRIP_INS]')
GO
CREATE OR ALTER PROCEDURE dbo.TRIP_INS
@p_AS_ID NVARCHAR(20) = NULL,
@p_TYPE VARCHAR(1) = NULL,
@p_QUANTITY DECIMAL(18,2) = NULL,
@p_QUANTITY_UNIT NVARCHAR(20) = NULL,
@p_QUANTITY_TRIP int = NULL,
@p_GO_FROM NVARCHAR(200) = NULL,
@p_GO_TO NVARCHAR(200) = NULL,
@p_TIME VARCHAR(20) = NULL,
@p_LENGTH DECIMAL(18,2) = NULL,
@p_LENGTH_UNIT NVARCHAR(20) = NULL,
@p_UNIT_ID NVARCHAR(20)= NULL,
@p_UNIT_DISTANCE_ID NVARCHAR(20) = NULL,
@p_CREATE_DATE NVARCHAR(60) = NULL


AS

IF @p_CREATE_DATE IS NULL OR @p_CREATE_DATE = '' SET @p_CREATE_DATE = GETDATE()
  ELSE SET @p_CREATE_DATE = CONVERT(DATETIME, @p_CREATE_DATE, 103);

DECLARE @p_INYEAR_ID INT = -1
IF (SELECT MAX(INYEAR_ID) FROM ASSIGNMENT WHERE YEAR(CREATE_DATE) = YEAR(@p_CREATE_DATE)) IS NOT NULL
  SET @p_INYEAR_ID =  (SELECT MAX(INYEAR_ID) FROM ASSIGNMENT WHERE YEAR(CREATE_DATE) = YEAR(@p_CREATE_DATE));
  ELSE SET @p_INYEAR_ID = 0;

SET @p_AS_ID = ((right('0000'+CONVERT([varchar](4),@p_INYEAR_ID),(4))+'-')+CONVERT([varchar](4),datepart(year,@p_CREATE_DATE)))

  BEGIN TRANSACTION
  INSERT INTO TRIP([AS_ID], [TYPE],[QUANTITY],[QUANTITY_UNIT],[QUANTITY_TRIP],[GO_FROM],[GO_TO],[TIME],[LENGTH],[LENGTH_UNIT], [UNIT_ID],[UNIT_DISTANCE_ID])
  VALUES (@p_AS_ID, @p_TYPE,@p_QUANTITY,@p_QUANTITY_UNIT,@p_QUANTITY_TRIP,@p_GO_FROM,@p_GO_TO,convert(DATETIME, @p_TIME,103),@p_LENGTH,@p_LENGTH_UNIT, @p_UNIT_ID, @p_UNIT_DISTANCE_ID)
 IF @@Error <> 0 GOTO ABORT
  COMMIT TRANSACTION

  SELECT
  '0' AS RESULT, @p_AS_ID AS_ID
  RETURN '0'

ABORT:
  BEGIN
    ROLLBACK TRANSACTION
    SELECT
      '-1' AS Result
     ,'' AS_ID
    RETURN '-1'
  END
GO

--
-- Create or alter procedure [dbo].[TRIP_DeL]
--
GO
PRINT (N'Create or alter procedure [dbo].[TRIP_DeL]')
GO
 CREATE OR ALTER PROCEDURE dbo.TRIP_DeL
@p_AS_ID NVARCHAR(20) = NULL,
@p_TYPE VARCHAR(1) = NULL

AS
DECLARE @ERRORSYS NVARCHAR(15) = ''
IF (NOT EXISTS (SELECT * FROM TRIP t WHERE t.AS_ID= @p_AS_ID AND t.TYPE = @p_TYPE))
  SET @ERRORSYS = 'NOT FOUND'

IF @ERRORSYS <> ''
BEGIN
	SELECT ErrorCode Result, ErrorDesc ErrorDesc FROM SYS_ERROR WHERE ErrorCode = @ERRORSYS
  RETURN '0'
END
  BEGIN TRANSACTION
    DELETE FROM TRIP WHERE (AS_ID = @p_AS_ID AND TYPE = @p_TYPE)  
    IF @@Error <> 0 GOTO ABORT
  COMMIT TRANSACTION

  SELECT
  '0' AS RESULT, @p_AS_ID AS_ID
  RETURN '0'

ABORT:
  BEGIN
    ROLLBACK TRANSACTION
    SELECT
      '-1' AS Result
     ,'' AS_ID
    RETURN '-1'
  END
GO